---
- hosts: localhost
  gather_facts: no
  name: create ec2 key
  tasks:
    - name: create ec2 keypair
      ec2_key:
        region: us-east-1
        name: ansiblekey
        key_material: "{{ lookup('file', '/home/ansible/ansiblekey.pub') }}"

##################################################
- hosts: localhost
  gather_facts: no
  name: create VPC SG SUBNET
  vars:
    vpc_title: 'WP-vpc'
    vpc_name: "{{ vpc_title }} VPC"
    igw_name: "{{ vpc_title }} IGW"
    subnet_name: "{{ vpc_title }} Subnet"
    acl_name: "{{ vpc_title }} ACL"
    security_group_name: "{{ vpc_title }} Security Group"
    route_table_name: "{{ vpc_title }} route table"
    vpcCidrBlock: '10.0.0.0/16'
    subNetCidrBlock: '10.0.1.0/24'
    port22CidrBlock: '0.0.0.0/0'
    destinationCidrBlock: '0.0.0.0/0'
    state: 'present'
    zone: 'us-east-1a'
    region: 'us-east-1'
    ec2_instances:
      - name: "WebServer"
        ami: "ami-07ebfd5b3428b6f4d" #
        tags: "Web"
        ssh_user: "ubuntu"
      - name: "Mysqlserver"
        ami: "ami-07ebfd5b3428b6f4d" #
        tags: "Mysql"
        ssh_user: "ubuntu"
  tasks:
    - name: create a new ec2 VPC
    # create a vpc with name, cidr block,dns support, and tenancy
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpcCidrBlock }}"
        region: "{{ region }}"
      # enable dns support
        dns_support: yes
      # enable dns hostnames
        dns_hostnames: yes
        tenancy: default
        state: "{{ state }}"
      register: ec2_vpc_net_result
    - name: create ec2 vpc internet gateway
    # create an internet gateway for the vpc
      ec2_vpc_igw:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ region }}"
        state: "{{ state }}"
        tags:
          Name: "{{ igw_name }}"
      register: igw_result
    - name: create ec2 vpc subnet
    # create the subnet for the vpc with a cidr block
      ec2_vpc_subnet:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone }}"      # az is the availability zone
        state: "{{ state }}"
        cidr: "{{ subNetCidrBlock }}"
      # enable public ip
        map_public: yes
        resource_tags:
          Name: "{{ subnet_name }}"
      register: subnet_result
    - name: create ec2 security group
    # create a security group for the vpc
      ec2_group:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ region }}"
        state: "{{ state }}"
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        tags:
          Name: "{{ security_group_name  }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "{{ port22CidrBlock }}"
            rule_desc: allow all on port 22
      register: security_group_results
    - name: create ec2 VPC Network access control list
    # create the access control list with ingress and egress ports
      ec2_vpc_nacl:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ region }}"
        state: "{{ state }}"
        name: "{{ acl_name }}"
        subnets: [ "{{ subnet_result.subnet.id }}" ]
        tags:
          Name: "{{ acl_name }}"
          Description: "{{ acl_name }}"      # ingress acl rules
        ingress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow ingress port 22
          - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow ingress port 80
          - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow icmp
          - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
        # allow mysql
          - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 3306, 3306]
        # allow ingress ephemeral ports
          - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]      # egress acl rules
        egress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow egres port ephemeral ports
          - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 32768, 65535]
        # allow egres port 80
          - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow egress mysql ports
          - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 3306, 3306]
      register: acl_results
    - name: create ec2 VPC public subnet route table
    # create route table and connect subnet to routes
      ec2_vpc_route_table:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ region }}"
        state: "{{ state }}"
        tags:
          Name: "{{ route_table_name }}"
        subnets: [ "{{ subnet_result.subnet.id }}" ]

      # create routes
        routes:
          - dest: "{{ destinationCidrBlock }}"
            gateway_id: "{{ igw_result.gateway_id }}"
      register: public_route_table
    - name: print out new vpc, subnet id, and security group for vpc
    # print out new subnet id and security group
      debug:
        msg: "To use the new created VPC: {{ vpc_name }}; Use subnet id: {{ subnet_result.subnet.id }} and security group: {{ security_group_results.group_id }} to create your AWS instances "

############################################

    - name: Create a web and mysql server EC2 instance
      ec2:
        key_name: ansiblekey     
        group_id: "{{ security_group_results.group_id }}"
        instance_type: t2.micro
        image: '{{ item.ami }}'
        wait: true
        region: us-east-1
        count: 1  # default
        count_tag:
          Name: '{{ item.tags }}'
        instance_tags:
          Name: '{{ item.tags }}'
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        assign_public_ip: yes
      register: ec2
      with_items:
          -  "{{ ec2_instances }}"
     
    - name: Wait a little longer for centos
      pause: seconds=600          
            
############################################################

      #- hosts: tag_Name_Mysql
      #  remote_user: ubuntu
      #  gather_facts: no
      #  become: yes
      #  become_method: sudo
      #  connection: ssh
      #  vars:
      #    mysql_root_password: mysql
      #
      #  tasks:
      #    - name: Install MySQL
      #      action: yum name={{ item }} state=present
      #      with_items:
      #        - mysql-server
      #        - python-mysqldb
      #        - libmysqlclient-dev
      #        - python3-mysql.connector
      #
      #    - name: Start the MySQL service
      #      action: service name=mysql state=started
      #
      #    - name: Remove the test database
      #      mysql_db: name=test state=absent
      #
      #    - name: Ensure anonymous users are not in the database
      #      mysql_user: user='' host= state=absent
      #      with_items:
      #        - 127.0.0.1
      #        - ::1
      #        - localhost
      #
      #    - name: Set the root password
      #      mysql_user:
      #        name: root
      #        password: "{{ mysql_root_password }}"
      #        login_unix_socket: /var/run/mysqld/mysqld.sock
      #
      #    - name: Update mysql root password for all root accounts
      #      mysql_user: name=root host={{item}} password={{mysql_root_password}}
      #      with_items:
      #        - 127.0.0.1
      #        - ::1
      #        - localhost
      #
      #    - name: Creates database for WordPress
      #      mysql_db:
      #        name: "{{ mysql_db }}"
      #        state: present
      #        login_user: root
      #        login_password: "{{ mysql_root_password }}"
      #
      #    - name: Create MySQL user for WordPress
      #      mysql_user:
      #        name: wpsql
      #        password: wpsql
      #        priv: "{{ mysql_db }}.*:ALL"
      #        state: present
      #        login_user: root
      #
      ##################################################################
      #
      #- hosts: tag_Name_Web
      #  remote_user: ubuntu
      #  gather_facts: no
      #  become: yes
      #  become_method: sudo
      #  connection: ssh
      #  handlers:
      #    - name: Reload Apache
      #      service:
      #        name: apache2
      #        state: reloaded
      #
      #    - name: Restart Apache
      #      service:
      #        name: apache2
      #        state: restarted
      #  vars:
      #    php_modules: [ 'php-curl', 'php-gd', 'php-mbstring', 'php-xml', 'php-xmlrpc', 'php-soap', 'php-intl', 'php-zip' ]
      #    http_host: "www.testboa.com"
      #    http_conf: "testboa.conf"
      #    http_port: "80"
      #  tasks:
      #    - name: Install apache
      #      action: yum name={{ item }} state=present
      #      with_items:
      #        - apache2
      #        - php
      #        - php-mysql
      #        - libapache2-mod-php
      #        - "{{php_modules}}"
      #    - name: Create document root
      #      file:
      #        path: "/var/www/{{ http_host }}"
      #        state: directory
      #        owner: "www-data"
      #        group: "www-data"
      #        mode: '0755'
      #
      #    - name: Set up Apache VirtualHost
      #      template:
      #        src: "files/apache.conf.j2"
      #        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      #      notify: Reload Apache
      #
      #    - name: Enable rewrite module
      #      shell: /usr/sbin/a2enmod rewrite
      #      notify: Reload Apache
      #
      #    - name: Enable new site
      #      shell: /usr/sbin/a2ensite {{ http_conf }}
      #      notify: Reload Apache
      #
      #    - name: Disable default Apache site
      #      shell: /usr/sbin/a2dissite 000-default.conf
      #      notify: Restart Apache
      #
      #    - name: "UFW - Allow HTTP on port 80"
      #      ufw:
      #        rule: allow
      #        port: "80"
      #        proto: tcp
      #
      ######################################################################
      #
      #    - name: Download and unpack latest WordPress
      #      unarchive:
      #        src: https://wordpress.org/latest.tar.gz
      #        dest: "/var/www/{{ http_host }}"
      #        remote_src: yes
      #        creates: "/var/www/{{ http_host }}/wordpress"
      #
      #    - name: Set ownership
      #      file:
      #        path: "/var/www/{{ http_host }}"
      #        state: directory
      #        recurse: yes
      #        owner: www-data
      #        group: www-data
      #
      #    - name: Set permissions for directories
      #      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
      #
      #    - name: Set permissions for files
      #      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
      #
      #    - name: Set up wp-config
      #      template:
      #        src: "files/wp-config.php.j2"
      #        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
